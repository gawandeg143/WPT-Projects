date : 09 June 2023
    Installed Git in directory Gaurav(f:)

1] checked git status :
git status
fatal: not a git repository (or any of the parent directories): .git


2] Configuring name and email globally(throughout the system)
 git config --global user.name "Gaurav"
 git config --global user.email "gawandeg401@gmail.com"


3] display list of configurations
 git config --list


4] to check name and email of the user
 git config user.name
 git congig user.email


5] check status of or track the working directory and the staging area
 git status


6] create a new git repository (i.e initializes a git repository)
 git init


7] move all untracked files to the staging area (after that git will start tracking the files in the local repository)
 git add --a


7] move a particular file to the staging area
 git add filename.extension // git add instructions.txt


8] commiting the changes or the files to the git repository with a message
 git commit -m "--message--"


9] to see your commits till now
 git log


10] to delete/remove the git repository // will no longer exist as a git repository
 rm -rf .git


11] clonning/copying an existing git repository to make a local copy
 git clone repo-link // git clone https://github.com/gawandeg143/My_repo_hub.git


12] clonning/copying an existing git repository to make a local copy with specified name
 git clone repo-link // git clone https://github.com/gawandeg143/My_repo_hub.git "specified_name"


13] If you have added a file to the staging area and then modified it the file will appear both in the staging area as well as in the modified section and can be committed. but the modified changes will not be committed.
 git diff // compares the working directory with the staging area
  also, from the above scenario it will show two versions of the same file. one that was added in the staging area and one which is modified and untracked.


13] git diff --staged // it shows the difference between only the staged files and same file committed last.


14] to ignore a particular file/files we can use .gitignore command
    i) create an empty hidden file with name gitignore i.e touch .gitignore
    ii) add the file names with extension in the .gitignore file
    iii) now if you check the status the git will ignore the file specified in .gitignore file and will no longer track the file.
    iv) then add the .gitignore file to the staging area and commit.
    Note : now even if there are any changes in the specified files mentioned in .gitignore git will simply ignore the modification.


15] if you want to ignore all the files with specific type/extension you can just add *.extension in the .gitignore file. // ex: *.txt


16] to ignore a folder/directory in the repository, add the directory to the .gitignore file // ex: dir_name/


*] but if you are already tracking a file and someday you add it to .gitignore then the git will add the file but will not ignore the file and will keep tracking the file or the changes. because you have not removed the file from tracking system. to do so you have to externally remove the file from the tracking system and then the git will ignore the file.
git rm --cached filename.extension // will untrack the file
then if you run git status, then in the staging area it will show that the file has been deleted. but actually it's not deleted and only ignored/untracked. then commit the changes.
    Also, if someday you remove the file from the .gitignore, and run git status, it will say untracked file....

17] to move modified/tracked file directly to git by skipping the stagging area. but untracked files will not be commited. nor will they enter the staging area unless you(user) add them.
  git commit -a -m "my message"


18] renaming a file
 if you rename a file by any means and run command git status, it will say that you have deleted a file(old_filename) and added a new file(new_filename) which is untracked.
 However, if you add the renamed file and run git status it will identify the changes and say that you have renamed the file. then you can commit the changes.


 18] renaming a file using git
  git mv current_filename.extension new_filename.extension  // it will rename the file and also will stage the file in the staging area(i.e ready to commit).
  ex: git mv first.txt first12.txt


19] removing a file
 git rm filename.extension // removes a file specified also changes are staged and are ready to commit. now commit to remove the file.


20] 